// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/shekshuev/gophertalk-backend/internal/repository (interfaces: PostRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/shekshuev/gophertalk-backend/internal/models"
)

// MockPostRepository is a mock of PostRepository interface.
type MockPostRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepositoryMockRecorder
}

// MockPostRepositoryMockRecorder is the mock recorder for MockPostRepository.
type MockPostRepositoryMockRecorder struct {
	mock *MockPostRepository
}

// NewMockPostRepository creates a new mock instance.
func NewMockPostRepository(ctrl *gomock.Controller) *MockPostRepository {
	mock := &MockPostRepository{ctrl: ctrl}
	mock.recorder = &MockPostRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepository) EXPECT() *MockPostRepositoryMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockPostRepository) CreatePost(arg0 models.CreatePostDTO) (*models.ReadPostDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", arg0)
	ret0, _ := ret[0].(*models.ReadPostDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepositoryMockRecorder) CreatePost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepository)(nil).CreatePost), arg0)
}

// DeletePost mocks base method.
func (m *MockPostRepository) DeletePost(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost.
func (mr *MockPostRepositoryMockRecorder) DeletePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockPostRepository)(nil).DeletePost), arg0, arg1)
}

// DislikePost mocks base method.
func (m *MockPostRepository) DislikePost(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DislikePost indicates an expected call of DislikePost.
func (mr *MockPostRepositoryMockRecorder) DislikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikePost", reflect.TypeOf((*MockPostRepository)(nil).DislikePost), arg0, arg1)
}

// GetAllPosts mocks base method.
func (m *MockPostRepository) GetAllPosts(arg0 models.FilterPostDTO) ([]models.ReadPostDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPosts", arg0)
	ret0, _ := ret[0].([]models.ReadPostDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPosts indicates an expected call of GetAllPosts.
func (mr *MockPostRepositoryMockRecorder) GetAllPosts(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPosts", reflect.TypeOf((*MockPostRepository)(nil).GetAllPosts), arg0)
}

// LikePost mocks base method.
func (m *MockPostRepository) LikePost(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikePost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikePost indicates an expected call of LikePost.
func (mr *MockPostRepositoryMockRecorder) LikePost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikePost", reflect.TypeOf((*MockPostRepository)(nil).LikePost), arg0, arg1)
}

// ViewPost mocks base method.
func (m *MockPostRepository) ViewPost(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewPost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ViewPost indicates an expected call of ViewPost.
func (mr *MockPostRepositoryMockRecorder) ViewPost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewPost", reflect.TypeOf((*MockPostRepository)(nil).ViewPost), arg0, arg1)
}
